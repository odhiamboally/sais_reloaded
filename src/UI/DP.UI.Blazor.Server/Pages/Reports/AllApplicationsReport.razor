@page "/reports/applications/all"
@inject IWebHostEnvironment Environment
@inject IServiceManager ServiceManager
@inject IJSRuntime JSRuntime
@inject AppState AppState
@inject NavigationManager Navigation



<br />

<div class="d-flex justify-content-between align-items-center mb-4 gap-2">
    @if (isMobile)
    {
        <h3 class="page-title">Applications Report</h3>
    }
    else
    {
        <h5 class="page-title">Applications Report</h5>
    }

    <div class="d-flex gap-2 ms-auto">
        <div class="page-header-alt">
            <RadzenButton Text="@(isMobile ? "Pdf" : "Export To Pdf")"
                          ButtonStyle="ButtonStyle.Success"
                          Shade="Shade.Dark"
                          Size="@(isMobile ? ButtonSize.ExtraSmall : ButtonSize.Small)"
                          Icon="picture_as_pdf"
                          IsBusy=@IsButtonBusy
                          Class="add-button-alt"
                          Click="@(() => ExportToPdf())"
                          Disabled="@IsExporting" />
        </div>
        <div class="page-header-alt">
            <RadzenButton Text="@(isMobile ? "Excel" : "Export To Excel")"
                          ButtonStyle="ButtonStyle.Success"
                          Shade="Shade.Dark"
                          Size="@(isMobile ? ButtonSize.ExtraSmall : ButtonSize.Small)"
                          Icon="grid_on"
                          IsBusy=@IsButtonBusy
                          Class="add-button-alt"
                          Click="@(() => ExportToExcel())"
                          Disabled="@IsExporting" />
        </div>
    </div>
</div>


@* Mobile Warning Alert *@
@if (isMobile && showMobileWarning)
{
    <RadzenAlert AlertStyle="AlertStyle.Warning" ShowIcon="true" class="mb-3">
        <div class="d-flex flex-column gap-2">
            <div>
                <strong>Large Screen Recommended</strong>
                <br />
                This table contains many columns and is best viewed on a larger screen for optimal experience.
            </div>
            <div class="d-flex gap-2">
                <RadzenButton Text="View in Browser"
                Size="ButtonSize.ExtraSmall"
                ButtonStyle="ButtonStyle.Warning"
                Icon="open_in_new"
                Click="@(() => OpenInBrowser())" />
                <RadzenButton Text="Continue Anyway"
                Size="ButtonSize.ExtraSmall"
                ButtonStyle="ButtonStyle.Light"
                Click="@(() => RemoveMobileWarning(true))" />
            </div>
        </div>
    </RadzenAlert>
}

@* <RadzenCard Class="app-table-container-bigger mb-3">
    <ChildContent>
        
    </ChildContent>
</RadzenCard> *@

<div style="overflow-x: auto; width: 100%;">
    <RadzenDataGrid @ref="ApplicationsGrid"
                    Data="@Applications"
                    TItem="ApplicationDetailResponse"
                    ShowPagingSummary="true"
                    PageSize="@PageSize"
                    IsLoading="@IsLoading"
                    Style="min-width: 1400px;">
        <Columns>
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="FirstName" Title="First Name" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="LastName" Title="Last Name" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="IDNumber" Title="ID Number" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="Age" Title="Age" Width="60px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="Sex" Title="Sex" Width="80px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="MaritalStatus" Title="Marital Status" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="County" Title="County" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="SubCounty" Title="Sub County" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="Location" Title="Location" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="SubLocation" Title="Sub Location" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="Village" Title="Village" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Title="Programmes">
                <Template Context="app">
                    @(app.Programmes is not null && app.Programmes.Any() ? string.Join(", ", app.Programmes.Select(p => p.Name)) : "—")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="Status" Title="Status" Width="100px" />
            <RadzenDataGridColumn TItem="ApplicationDetailResponse" Property="ApplicationDate" Title="Application Date" FormatString="{0:dd/MM/yyyy}" Width="120px" />
        </Columns>

        <FooterTemplate>
            <div class="w-100 p-2">
                @if (isMobile)
                {
                    <!-- Mobile Layout: Stacked -->
                    <div class="d-flex flex-column gap-2">
                        <!-- Page info on top -->
                        <div class="text-center">
                            <small>Page @CurrentPage of @TotalPages</small>
                            @if (TotalCount > 0)
                            {
                                <small class="text-muted"> | @PageSize Records</small>
                            }
                        </div>

                        <!-- Pagination controls below -->
                        @if (!IsLoading && TotalPages > 1)
                        {
                            <div class="d-flex justify-content-center flex-wrap gap-1">
                                <RadzenButton Text="‹‹"
                                              ButtonStyle="ButtonStyle.Info"
                                              Size="ButtonSize.ExtraSmall"
                                              Shade="Shade.Darker"
                                              Disabled="@IsFirstPage"
                                              Click="@(() => GoToPage(1))" />

                                <RadzenButton Text="‹"
                                              ButtonStyle="ButtonStyle.Info"
                                              Size="ButtonSize.ExtraSmall"
                                              Shade="Shade.Darker"
                                              Disabled="@IsFirstPage"
                                              Click="@(() => GoToPage(CurrentPage - 1))" />

                                @foreach (var page in VisiblePages.Take(3))
                                {
                                    <RadzenButton Text="@(page.ToString())"
                                                  Click="@(() => GoToPage(page))"
                                                  Size="ButtonSize.ExtraSmall"
                                                  ButtonStyle="@(page == CurrentPage ? ButtonStyle.Base : ButtonStyle.Light)"
                                                  Shade="Shade.Dark" />
                                }

                                <RadzenButton Text="›"
                                              ButtonStyle="ButtonStyle.Info"
                                              Size="ButtonSize.ExtraSmall"
                                              Shade="Shade.Darker"
                                              Disabled="@IsLastPage"
                                              Click="@(() => GoToPage(CurrentPage + 1))" />

                                <RadzenButton Text="››"
                                              ButtonStyle="ButtonStyle.Info"
                                              Size="ButtonSize.ExtraSmall"
                                              Shade="Shade.Darker"
                                              Disabled="@IsLastPage"
                                              Click="@(() => GoToPage(TotalPages))" />
                            </div>
                        }
                    </div>
                }
                else
                {
                    <!-- Desktop Layout: Side by side -->
                    <div class="d-flex justify-content-between align-items-center">
                        <!-- Left side: Page info -->
                        <div class="d-flex align-items-center gap-3">
                            <span>Page @CurrentPage of @TotalPages</span>
                            @if (TotalCount > 0)
                            {
                                <span class="text-muted">|</span>
                                <span>@PageSize Records</span>
                            }
                        </div>

                        <!-- Right side: Pagination controls -->
                        @if (!IsLoading && TotalPages > 1)
                        {
                            <div class="d-flex flex-wrap gap-2">
                                <RadzenButton Text="First"
                                              ButtonStyle="ButtonStyle.Info"
                                              Size="ButtonSize.Small"
                                              Shade="Shade.Darker"
                                              Disabled="@IsFirstPage"
                                              Click="@(() => GoToPage(1))" />

                                <RadzenButton Text="Previous"
                                              ButtonStyle="ButtonStyle.Info"
                                              Size="ButtonSize.Small"
                                              Shade="Shade.Darker"
                                              Disabled="@IsFirstPage"
                                              Click="@(() => GoToPage(CurrentPage - 1))" />

                                @foreach (var page in VisiblePages)
                                {
                                    <RadzenButton Text="@(page.ToString())"
                                                  Click="@(() => GoToPage(page))"
                                                  Size="ButtonSize.Small"
                                                  ButtonStyle="@(page == CurrentPage ? ButtonStyle.Base : ButtonStyle.Light)"
                                                  Shade="Shade.Dark" />
                                }

                                <RadzenButton Text="Next"
                                              ButtonStyle="ButtonStyle.Info"
                                              Size="ButtonSize.Small"
                                              Shade="Shade.Darker"
                                              Disabled="@IsLastPage"
                                              Click="@(() => GoToPage(CurrentPage + 1))" />

                                <RadzenButton Text="Last"
                                              ButtonStyle="ButtonStyle.Info"
                                              Size="ButtonSize.Small"
                                              Shade="Shade.Darker"
                                              Disabled="@IsLastPage"
                                              Click="@(() => GoToPage(TotalPages))" />
                            </div>
                        }
                    </div>
                }
            </div>
        </FooterTemplate>

    </RadzenDataGrid>
</div>


<br />


<RadzenMediaQuery Query="(max-width: 1199px)" Change="OnMqChange" />

@code {
    private CancellationTokenSource _cts = new();

    RadzenDataGrid<ApplicationDetailResponse>? ApplicationsGrid;

    private List<ApplicationDetailResponse> Applications = new();
    private GenerateReportRequest<ApplicationDetailResponse> GenerateReportRequest = new();

    private Dictionary<int, int?> PageCursorMap = new() { { 1, null } };
    private Dictionary<int, List<ApplicationDetailResponse>> PageDataMap = new();
    private Dictionary<int, DateTime> PageCacheTimestamps = new();

    private List<int> _persistentVisiblePages = []; 
    private int _maxPersistedWindowSize = 9; 

    private DataFilter Filter = new();

    private bool IsButtonBusy = false;
    private bool IsLoading = true;
    private bool showMobileWarning = true;
    bool isMobile;
    private bool IsExporting = false;

    private int PageSize = 15;
    private int CurrentPage = 1;
    private int TotalPages = 0;
    private int TotalCount = 0;
    private bool IsFirstPage { get; set; }
    private bool IsLastPage { get; set; }

    private List<int> VisiblePages = new();


    protected override async Task OnInitializedAsync()
    {
        Filter.PageSize = PageSize;

        try
        {
            IsLoading = true;

            ResetPaginationState();

            StateHasChanged();

            if (AppState?.ApplicationDetails?.Count > 0)
            {
                //Applications = AppState.ApplicationDetails ?? [];

                await RecalculatePaginationFromAppState();

                UpdateVisiblePages();
            }
            else
            {

                await LoadApplications();
            }

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to load applications: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // This runs when parameters change, including route parameters
        // Reset state if this is a fresh navigation
        if (Applications?.Count == 0 && !IsLoading)
        {
            await OnInitializedAsync();
        }
    }

    private async Task LoadApplications()
    {
        try
        {
            var applicationResponse = await ServiceManager.ReportService.GetAllApplicationsReportData(Filter);
            if (applicationResponse == null || applicationResponse.Data == null)
            {
                ResetPaginationState();

                await JSRuntime.InvokeVoidAsync("alert", "No applications data available.");

                return;
            }

            if (applicationResponse.Data?.NextCursor.HasValue == true)
            {
                PageCursorMap[2] = applicationResponse.Data.NextCursor;
            }

            Applications = applicationResponse.Data?.Items ?? [];

            TotalCount = applicationResponse.Data?.TotalCount ?? 0;
            TotalPages = applicationResponse.Data?.TotalPages ?? 0;
            CurrentPage = applicationResponse.Data?.CurrentPage ?? 1;
            IsFirstPage = applicationResponse.Data?.IsFirstPage ?? false;
            IsLastPage = applicationResponse.Data?.IsLastPage ?? false;

            Filter.Cursor = applicationResponse.Data?.NextCursor;
            Filter.PageNumber = applicationResponse.Data?.CurrentPage ?? 1;
            Filter.TotalCount = applicationResponse.Data?.TotalCount ?? 0;
            Filter.TotalPages = applicationResponse.Data?.TotalPages ?? 0;

            AppState.MergeApplicationDetailsResponse(Applications);

            UpdateVisiblePages();

        }
        catch (Exception)
        {
            ResetPaginationState();

            await JSRuntime.InvokeVoidAsync("alert", "Failed to load applications data.");
            throw;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }

    }

    private async Task ExportToPdf()
    {
        try
        {
            IsButtonBusy = true;
            IsExporting = true;

            if (Applications == null || !Applications.Any())
            {
                await JSRuntime.InvokeVoidAsync("alert", "No applications data available for export.");
                return;
            }

            GenerateReportRequest = new GenerateReportRequest<ApplicationDetailResponse>
                {
                    ReportKey = nameof(ApplicationDetailResponse) ?? "Report",
                    ReportName = "Applications Report",
                    LogoBase64 = (await ReadImageAsync()).base64String,
                    DataList = Applications
                };

            var response = await ServiceManager.ReportService.GeneratePdfAsync<ApplicationDetailResponse>(GenerateReportRequest);
            if (response == null || !response.Successful)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to generate report. | {response?.Message}");
                return;
            }

            if (response.Data == null || response.Data.Length == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Generated PDF is empty.");
                return;
            }

            var fileName = $"{GenerateReportRequest.ReportName}.pdf";
            var fileContent = Convert.ToBase64String(response.Data ?? []);
            await JSRuntime.InvokeVoidAsync("alert", "Report generated successfully!");
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent, "pdf");

        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            IsButtonBusy = false;
            IsExporting = false;
        }


    }

    private async Task ExportToExcel()
    {
        try
        {
            IsButtonBusy = true;
            IsExporting = true;
            GenerateReportRequest = new GenerateReportRequest<ApplicationDetailResponse>
                {
                    ReportKey = nameof(ApplicationDetailResponse) ?? "Report",
                    ReportName = "Applications Report",
                    DataList = Applications
                };

            var response = await ServiceManager.ReportService.GenerateExcelAsync<ApplicationDetailResponse>(GenerateReportRequest);
            if (response != null)
            {
                var fileName = $"{GenerateReportRequest.ReportName}.xlsx";
                var fileContent = Convert.ToBase64String(response.Data ?? []);

                await JSRuntime.InvokeVoidAsync("alert", "Report generated successfully!");
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent, "xld");
            }
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            IsButtonBusy = false;
            IsExporting = false;
        }


    }

    void OnMqChange(bool matches)
    {
        isMobile = matches;
    }

    private BadgeStyle GetStatusBadgeStyle(string status)
    {
        return status?.ToLower() switch
        {
            "completed" => BadgeStyle.Success,
            "pending" => BadgeStyle.Warning,
            "rejected" => BadgeStyle.Danger,
            _ => BadgeStyle.Secondary
        };
    }

    void RemoveMobileWarning(bool show)
    {
        showMobileWarning = !show;
        StateHasChanged();
    }

    private async Task OpenInBrowser()
    {
        // Get current URL
        var currentUrl = Navigation.Uri;

        // Open in new tab/window
        await JSRuntime.InvokeVoidAsync("open", currentUrl, "_blank");
    }

    private void UpdateVisiblePages(bool forceRecalculate = false)
    {
        // If we have persisted pages and not forcing recalculate
        if (_persistentVisiblePages.Any() && !forceRecalculate && _persistentVisiblePages.Contains(CurrentPage))
        {
            // Just use the existing window
            VisiblePages = _persistentVisiblePages;
            return;
        }

        // Calculate new window
        int startPage, endPage;

        // If we have previous pages, try to extend from them
        if (_persistentVisiblePages.Any())
        {
            int minPage = _persistentVisiblePages.Min();
            int maxPage = _persistentVisiblePages.Max();

            if (CurrentPage < minPage)
            {
                // Navigating left - extend window left
                startPage = Math.Max(1, CurrentPage);
                endPage = maxPage;
            }
            else if (CurrentPage > maxPage)
            {
                // Navigating right - extend window right
                startPage = minPage;
                endPage = Math.Min(TotalPages, CurrentPage);
            }
            else
            {
                // Shouldn't happen due to initial check
                startPage = minPage;
                endPage = maxPage;
            }

            // Ensure we don't exceed max window size
            if (endPage - startPage + 1 > _maxPersistedWindowSize)
            {
                if (CurrentPage < minPage)
                {
                    // Slide window left
                    endPage = startPage + _maxPersistedWindowSize - 1;
                }
                else
                {
                    // Slide window right
                    startPage = endPage - _maxPersistedWindowSize + 1;
                }
            }
        }
        else
        {
            // Initial load - start with current page + next
            startPage = Math.Max(1, CurrentPage);
            endPage = Math.Min(TotalPages, CurrentPage + 1);
        }

        _persistentVisiblePages = Enumerable.Range(startPage, endPage - startPage + 1).ToList();
        VisiblePages = _persistentVisiblePages;
    }

    private async Task GoToPage(int page)
    {
        try
        {
            IsLoading = true;

            if (page < 1 || page > TotalPages)
                return;

            // Check cache first
            if (IsPageCached(page))
            {
                Applications = PageDataMap[page];
                CurrentPage = page;
                IsFirstPage = page == 1;
                IsLastPage = page == TotalPages;
                Filter.PageNumber = page;
                Filter.TotalCount = TotalCount;
                Filter.TotalPages = TotalPages;
                Filter.Cursor = GetCursorForPage(page);
                UpdateVisiblePages();
                return;
            }

            // If requesting a page beyond what we've loaded before
            if (page > TotalPages && !IsLoading)
            {
                // Don't allow jumping to unknown pages until initial load
                await JSRuntime.InvokeVoidAsync("alert", "Please load data first - Click Next");
                return;
            }

            //StateHasChanged();

            Filter.Cursor = GetCursorForPage(page);
            Filter.PageNumber = page;

            var response = await ServiceManager.ReportService.GetAllApplicationsReportData(Filter);
            if (response?.Data == null) return;

            if (response.Data.TotalPages > TotalPages)
            {
                TotalPages = response.Data.TotalPages;
            }

            Applications = response.Data.Items ?? [];

            AppState.MergeApplicationDetailsResponse(Applications);

            PageDataMap[page] = Applications;

            PageCacheTimestamps[page] = DateTime.UtcNow;

            UpdateCursorMappings(page, response.Data.NextCursor, response.Data.PreviousCursor);

            CurrentPage = page;
            IsFirstPage = response.Data.IsFirstPage;
            IsLastPage = response.Data.IsLastPage;

            if (page == 1) IsLoading = false;

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading page {page}: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            UpdateVisiblePages();
            StateHasChanged();
        }
    }

    private bool IsPageCached(int page)
    {
        if (!PageDataMap.TryGetValue(page, out var cachedData))
            return false;

        if (!PageCacheTimestamps.TryGetValue(page, out var timestamp))
            return false;

        return DateTime.UtcNow - timestamp < TimeSpan.FromMinutes(5);
    }

    private int? GetCursorForPage(int targetPage)
    {
        // Simple case: first page
        if (targetPage == 1) return null;

        // Exact match
        if (PageCursorMap.TryGetValue(targetPage, out var cursor))
            return cursor;

        // Find nearest lower page with cursor
        var nearestPage = PageCursorMap.Keys
            .Where(k => k < targetPage)
            .OrderByDescending(k => k)
            .FirstOrDefault();

        return nearestPage > 0 ? PageCursorMap[nearestPage] : null;
    }

    private void UpdateCursorMappings(int currentPage, int? nextCursor, int? prevCursor)
    {
        if (nextCursor.HasValue)
        {
            PageCursorMap[currentPage + 1] = nextCursor.Value;
        }

        if (prevCursor.HasValue && currentPage > 1)
        {
            PageCursorMap[currentPage - 1] = prevCursor.Value;
        }

        // Prune old cursor mappings to prevent memory bloat
        if (PageCursorMap.Count > 50)
        {
            var oldestPages = PageCursorMap.Keys
                .OrderBy(k => k)
                .Take(PageCursorMap.Count - 50);

            foreach (var page in oldestPages)
            {
                InvalidateCache(page);
            }
        }
    }

    private void UpdatePaginationState(PagedResult<ApplicationDetailResponse> data)
    {
        TotalCount = data.TotalCount;
        TotalPages = data.TotalPages;
        CurrentPage = data.CurrentPage;
        IsFirstPage = data.IsFirstPage;
        IsLastPage = data.IsLastPage;
        Filter.Cursor = data.NextCursor;
        Filter.PageNumber = data.CurrentPage;
        Filter.TotalPages = data.TotalPages;
        Filter.TotalCount = data.TotalCount;
        UpdateVisiblePages();


        // Applications = [];
        // TotalCount = 0;
        // TotalPages = 0;
        // CurrentPage = 1;
        // IsFirstPage = true;
        // IsLastPage = false;
        // Filter.Cursor = null;
        // Filter.PageNumber = 1;
        // Filter.TotalCount = 0;
        // Filter.TotalPages = 0;
        // PageCursorMap.Clear();
        // VisiblePages = [];
    }

    private void ResetPaginationState()
    {
        // Reset all pagination-related properties to default values
        Applications = [];
        TotalCount = 0;
        TotalPages = 0;
        CurrentPage = 1;
        IsFirstPage = true;
        IsLastPage = false;
        Filter.Cursor = null;
        Filter.PageNumber = 1;
        Filter.TotalCount = 0;
        Filter.TotalPages = 0;
        PageCursorMap.Clear();
        VisiblePages = [];
        UpdateVisiblePages();
    }

    private async Task RecalculatePaginationFromAppState()
    {
        // If loading from AppState, we need to recalculate pagination info
        // since AppState might not have current pagination state

        // Reset filter to get first page
        var tempFilter = new DataFilter
        {
            PageSize = Filter.PageSize,
            PageNumber = 1,
            Cursor = null
        };

        var applicationResponse = await ServiceManager.ReportService.GetAllApplicationsReportData(tempFilter);
        if (applicationResponse?.Data != null)
        {
            Applications = applicationResponse.Data.Items;
            // Update pagination info but keep existing Applications from AppState
            TotalCount = applicationResponse.Data.TotalCount;
            TotalPages = applicationResponse.Data.TotalPages;
            CurrentPage = 1;
            IsFirstPage = true;
            IsLastPage = applicationResponse.Data.TotalPages <= 1;

            // Update filter with fresh data
            Filter.TotalCount = TotalCount;
            Filter.TotalPages = TotalPages;

            // Set up cursor mapping for page 2
            if (applicationResponse.Data.NextCursor.HasValue)
            {
                PageCursorMap[2] = applicationResponse.Data.NextCursor;
            }
        }
    }

    public void InvalidateCache(int page)
    {
        PageCursorMap.Remove(page);
        PageDataMap.Remove(page);
        PageCacheTimestamps.Remove(page);

        PageDataMap.Clear();
        PageCursorMap.Clear();
        PageCursorMap[1] = null; // Reset to initial state
    }

    private async Task<(string base64String, string imageDataUrl, byte[] imageBytes)> ReadImageAsync()
    {
        try
        {
            var imagePath = Path.Combine(Environment.WebRootPath, "images", "coat_of_arms.png");
            var imageBytes = await File.ReadAllBytesAsync(imagePath);

            var base64String = Convert.ToBase64String(imageBytes);
            var imageDataUrl = $"data:image/png;base64,{base64String}";

            return (base64String, imageDataUrl, imageBytes);
        }
        catch (Exception)
        {
            throw;
        }
    }
}
