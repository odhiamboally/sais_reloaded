@page "/applications/{applicantId:int}"
@inject IServiceManager ServiceManager
@inject AppState AppState
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<h3>Applications for Applicant @ApplicantId</h3>
<br />

<div class="mb-3 d-flex justify-content-between">
    <button class="btn btn-primary" @onclick="NavigateToAdd">
        <i class="fas fa-plus"></i> Add Application
    </button>
</div>
<br />

@if (IsLoading)
{
    <div class="text-center my-2">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (ApplicationsList == null || !ApplicationsList.Any())
{
    <p>No applications found for this applicant.</p>
}
else
{
    <EditForm Model="@Filter" OnValidSubmit="ApplyFilter">
        <div class="card mb-4">
            <div class="card-header">Filter Applications</div>
            <div class="card-body row">
                <div class="col-md-3">
                    <InputText @bind-Value="Filter.FirstName" class="form-control" placeholder="First Name" />
                </div>
                <div class="col-md-3">
                    <InputText @bind-Value="Filter.LastName" class="form-control" placeholder="Last Name" />
                </div>
                <div class="col-md-3">
                    <InputText @bind-Value="Filter.IDNumber" class="form-control" placeholder="ID Number" />
                </div>
                <div class="col-md-3">
                    <InputSelect @bind-Value="Filter.CountyId" class="form-control">
                        <option value="">Select County</option>
                        @foreach (var county in AppState.LookUpData?.Counties ?? [])
                        {
                            <option value="@county.Id">@county.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <RadzenDatePicker @bind-Value="Filter.FromDate"
                    DateFormat="dd/MM/yyyy"
                    Style="width: 100%;"
                    Placeholder="From Date"
                    AllowClear="true"
                    ShowTime="false"
                    Max="@DateTime.Today" />
                </div>

                <div class="col-md-3">
                    <RadzenDatePicker @bind-Value="Filter.ToDate"
                    DateFormat="dd/MM/yyyy"
                    Style="width: 100%;"
                    Placeholder="To Date"
                    AllowClear="true"
                    ShowTime="false"
                    Max="@DateTime.Today" />
                </div>

                <div class="col-md-3">
                    <InputText @bind-Value="Filter.Status" class="form-control" placeholder="Status" />
                </div>
                <div class="col-md-3">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <button type="button" class="btn btn-secondary w-100 mt-2" @onclick="ResetFilter">
                        <i class="fas fa-undo"></i> Reset
                    </button>
                </div>
            </div>
        </div>
    </EditForm>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Programme(s)</th>
                <th>Application Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var app in ApplicationsList)
            {
                <tr>
                    <td>@string.Join(", ", app.Programmes?.Select(p => p.Name) ?? [])</td>
                    <td>@app.ApplicationDate.ToString("dd/MM/yyyy")</td>
                    <td>@app.Status</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => NavigateToEdit(app.Id)">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteApplication(app.Id)">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter] public int ApplicantId { get; set; }


    private CancellationTokenSource _cts { get; set; } = new();

    private List<ApplicationResponse>? ApplicationsList { get; set; }
    private DataFilter Filter { get; set; } = new();
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var filter = new DataFilter { ApplicantId = ApplicantId };
        await LoadApplications(filter);
    }

    private async Task LoadApplications(DataFilter dataFilter)
    {
        IsLoading = true;
        var filter = new DataFilter { ApplicantId = ApplicantId };
        var response = await ServiceManager.ApplicationService.GetAllAsync(filter, _cts);
        ApplicationsList = response.Data?.Items ?? [];
        IsLoading = false;
    }

    private void NavigateToAdd()
    {
        Navigation.NavigateTo($"/add-application?applicantId={ApplicantId}");
    }

    private void NavigateToEdit(int applicationId)
    {
        Navigation.NavigateTo($"/edit-application/{applicationId}");
    }

    private async Task DeleteApplication(int applicationId)
    {
        try
        {
            var confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            if (!confirm) return;

            var result = await ServiceManager.ApplicationService.DeleteAsync(applicationId);
            if (result.Successful)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Application deleted.");
                var filter = new DataFilter { ApplicantId = ApplicantId };
                await LoadApplications(filter);
                StateHasChanged();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Failed to delete application.");
            }
        }
        catch (Exception)
        {
            
            throw;
        }
        
    }

    private async Task ApplyFilter()
    {
        await LoadApplications(Filter);
    }

    private async Task ResetFilter()
    {
        Filter = new DataFilter { ApplicantId = ApplicantId };
        await LoadApplications(Filter);
    }

    private void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

}
